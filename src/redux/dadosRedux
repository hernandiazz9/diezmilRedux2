import { firestore } from "../firebase";

//data inicial

const dataInicial = {
  arrayDados: [],
  arrayDadosGuardar: [],
  seTiro: undefined,
  primerTiro: false,
  segundoTiroEnAdelante: false,
  puntajeDeTiro: 0,
  jugadores: [],
  puntajeRonda: 0,
  escalera:false,
};
//types
// const TIRAR_DADOS = "TIRAR_DADOS";
const TIRAR_DADOS_MAS_VECES = "TIRAR_DADOS_MAS_VECES";
const SUMAR_TIRO = "SUMAR_TIRO";
const ARRAY_DADOS = "ARRAY_DADOS";
const ARRAY_DADOS_GUARDADOS = "ARRAY_DADOS_GUARDADOS";
const GUARDAR_PUNTAJE_TIRO = "GUARDAR_PUNTAJE_TIRO";
const GUARDAR_PUNTAJE_ESCALERA_TIRO = "GUARDAR_PUNTAJE_ESCALERA_TIRO";
const SUMAR_TIRO_ESCALERA_A_PUNTAJE = "SUMAR_TIRO_ESCALERA_A_PUNTAJE";
const RESET_DADOS_GUARDADOS= "RESET_DADOS_GUARDADOS"
const TODOS_DADOS_SELECCIONADOS= "TODOS_DADOS_SELECCIONADOS"

//reducer
export default function DadosReducer(state = dataInicial, action) {
  switch (action.type) {
    case ARRAY_DADOS:
      return { ...state,arrayDadosGuardar:[], primerTiro:true, escalera:false, arrayDados: action.payload }; //paso el array dados a el stqate arrayDados
    // case TIRAR_DADOS:
    //   return { ...state, escalera:false, seTiro:true, primerTiro:true };
    case ARRAY_DADOS_GUARDADOS:
      return {
        ...state,
        seTiro: false,
        arrayDadosGuardar: [...state.arrayDadosGuardar, action.payload],
      };
    case TIRAR_DADOS_MAS_VECES:
      return { ...state, segundoTiroEnAdelante: true,primerTiro:false, seTiro:false };
    case GUARDAR_PUNTAJE_TIRO:
      return { ...state, puntajeDeTiro: action.payload };
    case SUMAR_TIRO:
      return { ...state, puntajeRonda: state.puntajeRonda + action.payload };
    case RESET_DADOS_GUARDADOS:
      return {...state, arrayDadosGuardar: []}
    case GUARDAR_PUNTAJE_ESCALERA_TIRO:
      return{...state, puntajeDeTiro:action.payload, escalera:true }
    case SUMAR_TIRO_ESCALERA_A_PUNTAJE:
      return{...state, puntajeRonda: state.puntajeRonda + action.payload, escalera:false ,primerTiro:false }
    case TODOS_DADOS_SELECCIONADOS:
      return{...state, primerTiro:false }
    default:
      return { ...state };
  }
}

//actions
export const tirarDadosAction = (arrayDados) => async (
  dispatch,
  getState
) => {
  console.log(arrayDados, "action");
  dispatch({
    type: ARRAY_DADOS,
    payload: arrayDados,
  });
  const { seTiro } = getState().dados;

  var filtrados;
  var puntos = 0;
  var repetidos = {};
  const numOrdenado = arrayDados.sort(function (a, b) {
    return a - b;
  });
  if (
    numOrdenado[0] === numOrdenado[1] - 1 &&
    numOrdenado[1] === numOrdenado[2] - 1 &&
    numOrdenado[2] === numOrdenado[3] - 1 &&
    numOrdenado[3] === numOrdenado[4] - 1 &&
    numOrdenado[4] === numOrdenado[0] + 4
  ) {
    dispatch({
      type: GUARDAR_PUNTAJE_ESCALERA_TIRO,
      payload: 500,
    });
    return;
  } else if (
    numOrdenado[0] === 1 &&
    numOrdenado[1] === 3 &&
    numOrdenado[2] === 4 &&
    numOrdenado[3] === 5 &&
    numOrdenado[4] === 6
  ) {
    dispatch({
      type: GUARDAR_PUNTAJE_ESCALERA_TIRO,
      payload: 500,
    });
    return;
  }
  arrayDados.forEach((x) => {
    repetidos[x] = (repetidos[x] || 0) + 1;
  });
  for (let i = 0; i < Object.values(repetidos).length; i++) {
    if (Number(Object.values(repetidos)[i]) === 5) {
      console.log("gano"); // 5 dados iguales
    } else if (Number(Object.values(repetidos)[i]) >= 3) {
      if (Object.keys(repetidos)[i] === "1") {
        puntos = Number(Object.keys(repetidos)[i]) * 1000;
      } else {
        puntos = Number(Object.keys(repetidos)[i]) * 100;
      }
      if (Number(Object.values(repetidos)[i]) === 3) {
        filtrados = arrayDados.filter(
          (num) => num !== Number(Object.keys(repetidos)[i])
        );
      } else {
        filtrados = arrayDados.filter(
          (num) => num !== Number(Object.keys(repetidos)[i])
        );
        filtrados.push(Number(Object.keys(repetidos)[i]));
      }
      filtrados.forEach((x) => {
        if (x === 1) {
          puntos += 100;
        } else if (x === 5) {
          puntos += 50;
        }
      });
      console.log(puntos); // 3 dados iguales + 1 o 5 si aplica
      //
      if (seTiro) {
        dispatch({
          type: TIRAR_DADOS_MAS_VECES,
        });
      } else {
        dispatch({
          type: GUARDAR_PUNTAJE_TIRO,
          payload: puntos,
        });
      }
      return;
    }
  }
  arrayDados.forEach((x) => {
    if (x === 1) {
      puntos += 100;
    } else if (x === 5) {
      puntos += 50;
    } else return;
  });
  dispatch({
    type: GUARDAR_PUNTAJE_TIRO,
    payload: puntos,
  });
  console.log(puntos);
};

export const guardarDadoAction = (dadoGuardado) => (dispatch, getState) => {
  var repetidos2 = {};
  dispatch({
    type: ARRAY_DADOS_GUARDADOS,
    payload: Number(dadoGuardado),
  });
  const nuevoArrayDadoNum = getState().dados.arrayDadosGuardar;
  var punto = 0;
  console.log(nuevoArrayDadoNum, "nuevoArrayDadoNum");
  const calculoPuntaje = (nuevoArrayDadoNum) => {
    nuevoArrayDadoNum.forEach((x) => {
      repetidos2[x] = (repetidos2[x] || 0) + 1;
    });
    console.log(repetidos2, "repetidos2");
    
    for (let i = 0; i < Object.values(repetidos2).length; i++) {
      if (Number(Object.values(repetidos2)[i]) === 3) {
        
        if (Object.keys(repetidos2)[0] === '1') {
          punto = 800;
          dispatch({
            type: RESET_DADOS_GUARDADOS,
          })
          return dispatch({
            type: SUMAR_TIRO,
            payload: punto,
          })
        } else {
          punto = 400;
          dispatch({
            type: RESET_DADOS_GUARDADOS,
          })
          return dispatch({
            type: SUMAR_TIRO,
            payload: punto,
          });
        }//// ver que hacer para que cuando sean 3'5' guarde 500 y no 150
      }
    }
    if (dadoGuardado === "1") {
      punto += 100;
    } else if (dadoGuardado === "5") {
      punto += 50;
    }
    dispatch({
      type: SUMAR_TIRO,
      payload: punto,
    });
  };
  calculoPuntaje(nuevoArrayDadoNum);
};
export const sumarTresAction = (tresDados) => (dispatch) => {
  const valor = Number(tresDados[0]) * 100;
  dispatch({
    type: SUMAR_TIRO,
    payload: valor,
  });
};
export const sumarEscalera = (arrayEscalera) => (dispatch) =>{
  var pts = 500;
  arrayEscalera.forEach(dado =>{
    if(Number(dado.dataset.roll)===5){
      pts -= 50
    }else if(Number(dado.dataset.roll)===1){
      pts -= 100
    }
  })
  console.log(pts,'pts');
  dispatch({
    type:SUMAR_TIRO_ESCALERA_A_PUNTAJE,
    payload:pts
  })
}
export const todosDadosSelec = () => (dispatch) => {
  
  dispatch({
    type: TODOS_DADOS_SELECCIONADOS,
  });
};

// futuro: guardar puntaje en la nube para poder mostrar cuando otro jugador muestra
// al igual que dados. usar num dados para pasar como variable para setear valor de dado
//tomar los puntos y mandarlos al acumulador de puntos del tiro y del juego pensar en esa parte, primero del tiro
